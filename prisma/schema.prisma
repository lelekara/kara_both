// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id 
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  photos   Photo[]
  evenements    Evenement[] 

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Evenement {
  id          String    @id @default(cuid())
  titre       String
  slug        String    @unique
  description String?
  date        DateTime  @default(now())
  codeAcces   String?   // facultatif : code pour restreindre l’accès
  photos      Photo[]
  createdAt   DateTime  @default(now())

  user        User       @relation(fields: [userId], references: [id])
  userId      String
}

model Photo {
  id          String    @id @default(cuid())
  nom         String?   // nom de la personne qui a posté (facultatif)
  prenom      String?   // idem
  url         String    // chemin de l’image (local ou Cloudinary)
  evenement   Evenement @relation(fields: [evenementId], references: [id])
  evenementId String
  createdAt   DateTime  @default(now())
  user   User? @relation(fields: [userId], references: [id])
  userId String?
}
